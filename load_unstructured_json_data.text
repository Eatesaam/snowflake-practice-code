// Create database
CREATE DATABASE MANAGE_DB;
CREATE DATABASE OUR_FIRST_DB;

// Create Schema
CREATE SCHEMA EXTERNAL_STAGES;
CREATE SCHEMA FILE_FORMATS;

// Create stage 
CREATE OR REPLACE STAGE MANAGE_DB.EXTERNAL_STAGES.aws_stage
    url = "s3://bucketsnowflake-jsondemo";
    
LIST @MANAGE_DB.EXTERNAL_STAGES.aws_stage

// Create file format
CREATE OR REPLACE file format MANAGE_DB.FILE_FORMATS.JSONFORMAT
    TYPE = JSON;
    
// Create Table
CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.JSON_RAW(
    raw_file VARIANT
);

// Load data using copy command
COPY INTO OUR_FIRST_DB.PUBLIC.JSON_RAW
    FROM @MANAGE_DB.EXTERNAL_STAGES.aws_stage
    file_format = MANAGE_DB.FILE_FORMATS.JSONFORMAT
    files = ('HR_data.json');

// Select from JSON_RAW
SELECT * FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:city FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT $1:first_name FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:first_name::string as first_name FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:id::int as id FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    RAW_FILE:last_name::string as last_name,
    RAW_FILE:gender::string as gender
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

// Handling meta data
SELECT RAW_FILE:job::string as job FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:job.salary::int as salary FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

SELECT
    RAW_FILE:first_name::string as first_name, 
    RAW_FILE:job.salary::int as salary,
    RAW_FILE:job.title::string as title 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

// Handling arrays
SELECT RAW_FILE:prev_company as prev_company FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT RAW_FILE:prev_company[0]::string as prev_company FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
SELECT ARRAY_SIZE(RAW_FILE:prev_company) as prev_company FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    RAW_FILE:prev_company[0]::string as prev_company 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW
UNION ALL
SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    RAW_FILE:prev_company[0]::string as prev_company 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW
ORDER BY id;

// Handling hierarchy
SELECT RAW_FILE:spoken_languages as spoken_languages FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

SELECT
    RAW_FILE:first_name::string as first_name,
    RAW_FILE:spoken_languages[0].language::string as first_language,
    RAW_FILE:spoken_languages[0].level::string as level 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    RAW_FILE:spoken_languages[0].language::string as first_language,
    RAW_FILE:spoken_languages[0].level::string as level 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW
UNION ALL
SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    RAW_FILE:spoken_languages[0].language::string as first_language,
    RAW_FILE:spoken_languages[0].level::string as level 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;

SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    f.value:language::string as first_language,
    f.value:level::string as level_spoken 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW, 
     TABLE(flatten(RAW_FILE:spoken_languages)) f;
     
     
CREATE OR REPLACE TABLE Languages
AS
SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    f.value:language::string as first_language,
    f.value:level::string as level_spoken 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW, 
     TABLE(flatten(RAW_FILE:spoken_languages)) f;
     
     
INSERT INTO Languages
AS
SELECT
    RAW_FILE:id::int as id,
    RAW_FILE:first_name::string as first_name,
    f.value:language::string as first_language,
    f.value:level::string as level_spoken 
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW, 
     TABLE(flatten(RAW_FILE:spoken_languages)) f;
     
SELECT * FROM Languages;